/*
* Copyright 2024 Ipsolon Research
*
* SPDX-License-Identifier: GPL-3.0-or-later
*/
#include <iostream>
#include <bits/stdc++.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#include "safe_main.hpp"
#include "chameleon_fw_common.h"

#define RECV_TIMEOUT_SECS 20

#define TCP_REPLY_COMMAND "tcpreplay -i lo -tK --loop 500000000 /mnt/c/Users/joshua.meyers/titan/samples/samples_localhost.pcap"
#define HOST_IP_ADDR "127.0.0.1"  /* IP Adder to send the VITA packets */
#define HOST_Port    49153  /* IP Adder to send the VITA packets */


std::queue<chameleon_fw_comms_t> buffer;
std::mutex mtx;
std::condition_variable cv;

int open_socket(int port);

void process_freq(const chameleon_fw_comms_t &request)
{
    std::cout << "Process set center freq(" << request.tune.freq <<  ") on chan:" << request.tune.chan << std::endl;
}

static bool stream_run = false;

[[noreturn]]
void vita_thread_func(int sock_fd)
{
    std::cout << __FUNCTION__;
    std::cout << "the socket is = " << sock_fd << std::endl;

    std::string hostname{HOST_IP_ADDR};
    uint16_t port = HOST_Port;

    sockaddr_in destination{};
    destination.sin_family = AF_INET;
    destination.sin_port = htons(port);
    destination.sin_addr.s_addr = inet_addr(hostname.c_str());

    uint8_t vita_buff[] = {
            0x03, 0x00, 0xc0, 0x05, 0x00, 0x00,
            0xe0, 0x00, 0xaa, 0xea, 0x4d, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
            0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x04, 0x00, 0x02, 0x00, 0xf9, 0xff, 0xfc, 0xff, 0x0b, 0x00,
            0x06, 0x00, 0xef, 0xff, 0xf6, 0xff, 0x19, 0x00, 0x0e, 0x00, 0xdc, 0xff, 0xeb, 0xff, 0x33, 0x00,
            0x1d, 0x00, 0xb9, 0xff, 0xd8, 0xff, 0x62, 0x00, 0x38, 0x00, 0x78, 0xff, 0xb3, 0xff, 0xc1, 0x00,
            0x6d, 0x00, 0xda, 0xfe, 0x5b, 0xff, 0x13, 0x02, 0x25, 0x01, 0xd4, 0xf8, 0xc7, 0xfc, 0xda, 0xfe,
            0x00, 0xfe, 0xf7, 0x03, 0x8c, 0x01, 0x42, 0x00, 0x58, 0xff, 0x26, 0x02, 0x6c, 0x00, 0xdf, 0x00,
            0xa3, 0xff, 0xc8, 0x01, 0x24, 0x00, 0x20, 0x01, 0xb7, 0xff, 0x9a, 0x01, 0xf8, 0xff, 0x3f, 0x01,
            0xba, 0xff, 0x7d, 0x01, 0xd4, 0xff, 0x53, 0x01, 0xb2, 0xff, 0x6b, 0x01, 0xb9, 0xff, 0x5a, 0x01,
            0xa6, 0xff, 0x61, 0x01, 0xa6, 0xff, 0x57, 0x01, 0x97, 0xff, 0x58, 0x01, 0x92, 0xff, 0x57, 0x01,
            0x8a, 0xff, 0x51, 0x01, 0x80, 0xff, 0x4e, 0x01, 0x79, 0xff, 0x4c, 0x01, 0x70, 0xff, 0x48, 0x01,
            0x64, 0xff, 0x46, 0x01, 0x61, 0xff, 0x40, 0x01, 0x57, 0xff, 0x3f, 0x01, 0x4f, 0xff, 0x3a, 0x01,
            0x47, 0xff, 0x33, 0x01, 0x3b, 0xff, 0x2c, 0x01, 0x35, 0xff, 0x28, 0x01, 0x2d, 0xff, 0x24, 0x01,
            0x29, 0xff, 0x1f, 0x01, 0x20, 0xff, 0x18, 0x01, 0x1b, 0xff, 0x12, 0x01, 0x13, 0xff, 0x0b, 0x01,
            0x0a, 0xff, 0x03, 0x01, 0x05, 0xff, 0x02, 0x01, 0xfd, 0xfe, 0xfa, 0x00, 0xf8, 0xfe, 0xf3, 0x00,
            0xf1, 0xfe, 0xec, 0x00, 0xee, 0xfe, 0xe7, 0x00, 0xe6, 0xfe, 0xdd, 0x00, 0xe0, 0xfe, 0xda, 0x00,
            0xdd, 0xfe, 0xd0, 0x00, 0xd5, 0xfe, 0xc7, 0x00, 0xd0, 0xfe, 0xc2, 0x00, 0xca, 0xfe, 0xb8, 0x00,
            0xc7, 0xfe, 0xb3, 0x00, 0xc0, 0xfe, 0xa9, 0x00, 0xbb, 0xfe, 0x9f, 0x00, 0xb9, 0xfe, 0x97, 0x00,
            0xb2, 0xfe, 0x90, 0x00, 0xb2, 0xfe, 0x87, 0x00, 0xab, 0xfe, 0x7e, 0x00, 0xaa, 0xfe, 0x73, 0x00,
            0xa8, 0xfe, 0x6b, 0x00, 0xa7, 0xfe, 0x65, 0x00, 0xa5, 0xfe, 0x5d, 0x00, 0xa1, 0xfe, 0x52, 0x00,
            0x9f, 0xfe, 0x4a, 0x00, 0x9d, 0xfe, 0x42, 0x00, 0x9b, 0xfe, 0x39, 0x00, 0x98, 0xfe, 0x31, 0x00,
            0x95, 0xfe, 0x26, 0x00, 0x96, 0xfe, 0x1c, 0x00, 0x95, 0xfe, 0x13, 0x00, 0x94, 0xfe, 0x0a, 0x00,
            0x94, 0xfe, 0x04, 0x00, 0x91, 0xfe, 0xf9, 0xff, 0x93, 0xfe, 0xf1, 0xff, 0x94, 0xfe, 0xe9, 0xff,
            0x96, 0xfe, 0xde, 0xff, 0x96, 0xfe, 0xd6, 0xff, 0x97, 0xfe, 0xcc, 0xff, 0x99, 0xfe, 0xc3, 0xff,
            0x98, 0xfe, 0xbb, 0xff, 0x9a, 0xfe, 0xb1, 0xff, 0x9b, 0xfe, 0xa8, 0xff, 0x9f, 0xfe, 0x9b, 0xff,
            0xa4, 0xfe, 0x92, 0xff, 0xa3, 0xfe, 0x8a, 0xff, 0xa6, 0xfe, 0x83, 0xff, 0xab, 0xfe, 0x7b, 0xff,
            0xaf, 0xfe, 0x72, 0xff, 0xb2, 0xfe, 0x6b, 0xff, 0xb4, 0xfe, 0x62, 0xff, 0xb6, 0xfe, 0x5b, 0xff,
            0xbc, 0xfe, 0x4f, 0xff, 0xbf, 0xfe, 0x49, 0xff, 0xc3, 0xfe, 0x42, 0xff, 0xc9, 0xfe, 0x3a, 0xff,
            0xcd, 0xfe, 0x34, 0xff, 0xd3, 0xfe, 0x2c, 0xff, 0xda, 0xfe, 0x20, 0xff, 0xdf, 0xfe, 0x1b, 0xff,
            0xe4, 0xfe, 0x16, 0xff, 0xeb, 0xfe, 0x10, 0xff, 0xed, 0xfe, 0x06, 0xff, 0xf4, 0xfe, 0x01, 0xff,
            0xfa, 0xfe, 0xfa, 0xfe, 0x01, 0xff, 0xf2, 0xfe, 0x08, 0xff, 0xee, 0xfe, 0x0f, 0xff, 0xe9, 0xfe,
            0x18, 0xff, 0xe2, 0xfe, 0x1b, 0xff, 0xdb, 0xfe, 0x24, 0xff, 0xd7, 0xfe, 0x2f, 0xff, 0xd1, 0xfe,
            0x32, 0xff, 0xcc, 0xfe, 0x3c, 0xff, 0xc9, 0xfe, 0x46, 0xff, 0xc2, 0xfe, 0x4d, 0xff, 0xbf, 0xfe,
            0x54, 0xff, 0xba, 0xfe, 0x5c, 0xff, 0xb6, 0xfe, 0x64, 0xff, 0xb3, 0xfe, 0x6a, 0xff, 0xb2, 0xfe,
            0x74, 0xff, 0xab, 0xfe, 0x7c, 0xff, 0xaa, 0xfe, 0x87, 0xff, 0xa5, 0xfe, 0x8f, 0xff, 0xa4, 0xfe,
            0x97, 0xff, 0xa0, 0xfe, 0xa1, 0xff, 0x9d, 0xfe, 0xac, 0xff, 0x9d, 0xfe, 0xb0, 0xff, 0x9b, 0xfe,
            0xbb, 0xff, 0x9b, 0xfe, 0xc5, 0xff, 0x99, 0xfe, 0xcd, 0xff, 0x97, 0xfe, 0xd5, 0xff, 0x97, 0xfe,
            0xdf, 0xff, 0x90, 0xfe, 0xe6, 0xff, 0x95, 0xfe, 0xef, 0xff, 0x93, 0xfe, 0xf7, 0xff, 0x93, 0xfe,
            0x02, 0x00, 0x93, 0xfe, 0x0b, 0x00, 0x93, 0xfe, 0x17, 0x00, 0x95, 0xfe, 0x20, 0x00, 0x95, 0xfe,
            0x2d, 0x00, 0x97, 0xfe, 0x33, 0x00, 0x99, 0xfe, 0x3a, 0x00, 0x9a, 0xfe, 0x44, 0x00, 0x9a, 0xfe,
            0x4b, 0x00, 0x9e, 0xfe, 0x53, 0x00, 0xa0, 0xfe, 0x5e, 0x00, 0xa5, 0xfe, 0x6a, 0x00, 0xaa, 0xfe,
            0x73, 0x00, 0xa9, 0xfe, 0x7c, 0x00, 0xad, 0xfe, 0x83, 0x00, 0xaa, 0xfe, 0x8a, 0x00, 0xb2, 0xfe,
            0x91, 0x00, 0xb4, 0xfe, 0x97, 0x00, 0xb7, 0xfe, 0xa1, 0x00, 0xbf, 0xfe, 0xaa, 0x00, 0xc2, 0xfe,
            0xb1, 0x00, 0xc8, 0xfe, 0xbb, 0x00, 0xcc, 0xfe, 0xc0, 0x00, 0xd3, 0xfe, 0xca, 0x00, 0xd2, 0xfe,
            0xcf, 0x00, 0xd7, 0xfe, 0xd8, 0x00, 0xe0, 0xfe, 0xe1, 0x00, 0xe8, 0xfe, 0xe6, 0x00, 0xed, 0xfe,
            0xef, 0x00, 0xef, 0xfe, 0xf6, 0x00, 0xfa, 0xfe, 0xfd, 0x00, 0xff, 0xfe, 0x04, 0x01, 0x04, 0xff,
            0x0a, 0x01, 0x0b, 0xff, 0x10, 0x01, 0x14, 0xff, 0x14, 0x01, 0x1a, 0xff, 0x17, 0x01, 0x22, 0xff,
            0x1f, 0x01, 0x29, 0xff, 0x25, 0x01, 0x31, 0xff, 0x2a, 0x01, 0x37, 0xff, 0x2d, 0x01, 0x40, 0xff,
            0x33, 0x01, 0x49, 0xff, 0x38, 0x01, 0x50, 0xff, 0x40, 0x01, 0x5a, 0xff, 0x43, 0x01, 0x60, 0xff,
            0x49, 0x01, 0x69, 0xff, 0x49, 0x01, 0x70, 0xff, 0x50, 0x01, 0x79, 0xff, 0x51, 0x01, 0x81, 0xff,
            0x55, 0x01, 0x87, 0xff, 0x5a, 0x01, 0x94, 0xff, 0x5c, 0x01, 0x99, 0xff, 0x5f, 0x01, 0xa6, 0xff,
            0x5e, 0x01, 0xb1, 0xff, 0x5f, 0x01, 0xb9, 0xff, 0x64, 0x01, 0xc0, 0xff, 0x66, 0x01, 0xc6, 0xff,
            0x66, 0x01, 0xd0, 0xff, 0x69, 0x01, 0xd7, 0xff, 0x6b, 0x01, 0xe5, 0xff, 0x6a, 0x01, 0xed, 0xff,
            0x6b, 0x01, 0xf5, 0xff, 0x6c, 0x01, 0x01, 0x00, 0x6a, 0x01, 0x08, 0x00, 0x6d, 0x01, 0x0f, 0x00,
            0x6b, 0x01, 0x1c, 0x00, 0x69, 0x01, 0x24, 0x00, 0x6c, 0x01, 0x29, 0x00, 0x68, 0x01, 0x38, 0x00,
            0x66, 0x01, 0x40, 0x00, 0x67, 0x01, 0x47, 0x00, 0x65, 0x01, 0x52, 0x00, 0x64, 0x01, 0x58, 0x00,
            0x60, 0x01, 0x62, 0x00, 0x5e, 0x01, 0x6d, 0x00, 0x5c, 0x01, 0x75, 0x00, 0x58, 0x01, 0x7d, 0x00,
            0x56, 0x01, 0x86, 0x00, 0x50, 0x01, 0x8e, 0x00, 0x4c, 0x01, 0x96, 0x00, 0x4b, 0x01, 0x9c, 0x00,
            0x49, 0x01, 0xa5, 0x00, 0x42, 0x01, 0xae, 0x00, 0x41, 0x01, 0xb4, 0x00, 0x3c, 0x01, 0xbe, 0x00,
            0x35, 0x01, 0xc2, 0x00, 0x32, 0x01, 0xce, 0x00, 0x2c, 0x01, 0xd6, 0x00, 0x26, 0x01, 0xdd, 0x00,
            0x23, 0x01, 0xe4, 0x00, 0x1d, 0x01, 0xeb, 0x00, 0x16, 0x01, 0xf0, 0x00, 0x0f, 0x01, 0xf7, 0x00,
            0x09, 0x01, 0xfd, 0x00, 0x03, 0x01, 0x02, 0x01, 0xff, 0x00, 0x0d, 0x01, 0xf8, 0x00, 0x11, 0x01,
            0xf0, 0x00, 0x16, 0x01, 0xe5, 0x00, 0x1d, 0x01, 0xe1, 0x00, 0x21, 0x01, 0xd8, 0x00, 0x29, 0x01,
            0xd1, 0x00, 0x2d, 0x01, 0xca, 0x00, 0x32, 0x01, 0xc4, 0x00, 0x35, 0x01, 0xbe, 0x00, 0x3b, 0x01,
            0xb6, 0x00, 0x3f, 0x01, 0xac, 0x00, 0x42, 0x01, 0xa3, 0x00, 0x4a, 0x01, 0x9d, 0x00, 0x49, 0x01,
            0x95, 0x00, 0x4e, 0x01, 0x90, 0x00, 0x51, 0x01, 0x84, 0x00, 0x56, 0x01, 0x7a, 0x00, 0x57, 0x01,
            0x71, 0x00, 0x5a, 0x01, 0x69, 0x00, 0x5e, 0x01, 0x60, 0x00, 0x60, 0x01, 0x57, 0x00, 0x62, 0x01,
            0x4e, 0x00, 0x65, 0x01, 0x46, 0x00, 0x64, 0x01, 0x3a, 0x00, 0x67, 0x01, 0x33, 0x00, 0x68, 0x01,
            0x27, 0x00, 0x68, 0x01, 0x1f, 0x00, 0x6b, 0x01, 0x18, 0x00, 0x6c, 0x01, 0x0e, 0x00, 0x6c, 0x01,
            0x09, 0x00, 0x6c, 0x01, 0xfe, 0xff, 0x6c, 0x01, 0xf3, 0xff, 0x69, 0x01, 0xeb, 0xff, 0x69, 0x01,
            0xe1, 0xff, 0x69, 0x01, 0xd6, 0xff, 0x68, 0x01, 0xcf, 0xff, 0x67, 0x01, 0xca, 0xff, 0x65, 0x01,
            0xbf, 0xff, 0x64, 0x01, 0xb4, 0xff, 0x5f, 0x01, 0xaa, 0xff, 0x5c, 0x01, 0xa0, 0xff, 0x5b, 0x01,
            0x98, 0xff, 0x59, 0x01, 0x91, 0xff, 0x58, 0x01, 0x89, 0xff, 0x57, 0x01, 0x80, 0xff, 0x52, 0x01,
            0x78, 0xff, 0x4e, 0x01, 0x6e, 0xff, 0x4b, 0x01, 0x66, 0xff, 0x44, 0x01, 0x5f, 0xff, 0x43, 0x01,
            0x55, 0xff, 0x3d, 0x01, 0x4c, 0xff, 0x3a, 0x01, 0x45, 0xff, 0x34, 0x01, 0x3e, 0xff, 0x2c, 0x01,
            0x39, 0xff, 0x28, 0x01, 0x31, 0xff, 0x20, 0x01, 0x27, 0xff, 0x1d, 0x01, 0x22, 0xff, 0x17, 0x01,
            0x19, 0xff, 0x12, 0x01, 0x12, 0xff, 0x0c, 0x01, 0x0c, 0xff, 0x07, 0x01, 0x05, 0xff, 0xff, 0x00,
            0xfe, 0xfe, 0xfb, 0x00, 0xf9, 0xfe, 0xf1, 0x00, 0xf1, 0xfe, 0xe9, 0x00, 0xea, 0xfe, 0xe3, 0x00,
            0xe5, 0xfe, 0xdd, 0x00, 0xe2, 0xfe, 0xdc, 0x00, 0xdf, 0xfe, 0xd2, 0x00, 0xd8, 0xfe, 0xca, 0x00,
            0xd0, 0xfe, 0xc0, 0x00, 0xcc, 0xfe, 0xb5, 0x00, 0xc6, 0xfe, 0xad, 0x00, 0xc2, 0xfe, 0xa6, 0x00,
            0xbc, 0xfe, 0x9c, 0x00, 0xba, 0xfe, 0x97, 0x00, 0xb9, 0xfe, 0x93, 0x00, 0xb2, 0xfe, 0x88, 0x00,
            0xaf, 0xfe, 0x7c, 0x00, 0xab, 0xfe, 0x72, 0x00, 0xa9, 0xfe, 0x69, 0x00, 0xa5, 0xfe, 0x64, 0x00,
            0xa1, 0xfe, 0x5b, 0x00, 0xa0, 0xfe, 0x52, 0x00, 0x9e, 0xfe, 0x49, 0x00, 0x9c, 0xfe, 0x40, 0x00,
            0x98, 0xfe, 0x38, 0x00, 0x97, 0xfe, 0x2e, 0x00, 0x98, 0xfe, 0x24, 0x00, 0x99, 0xfe, 0x1c, 0x00,
            0x96, 0xfe, 0x12, 0x00, 0x97, 0xfe, 0x0c, 0x00, 0x93, 0xfe, 0x02, 0x00, 0x96, 0xfe, 0xf7, 0xff,
            0x94, 0xfe, 0xee, 0xff, 0x95, 0xfe, 0xe5, 0xff, 0x98, 0xfe, 0xdd, 0xff, 0x96, 0xfe, 0xd4, 0xff,
            0x99, 0xfe, 0xc8, 0xff, 0x99, 0xfe, 0xbd, 0xff, 0x9a, 0xfe, 0xb5, 0xff, 0x9d, 0xfe, 0xaf, 0xff,
            0xa1, 0xfe, 0xa7, 0xff, 0xa1, 0xfe, 0x9f, 0xff, 0xa2, 0xfe, 0x96, 0xff, 0xa4, 0xfe, 0x8d, 0xff,
            0xa8, 0xfe, 0x83, 0xff, 0xab, 0xfe, 0x7a, 0xff, 0xad, 0xfe, 0x74, 0xff, 0xb2, 0xfe, 0x6d, 0xff,
            0xb3, 0xfe, 0x66, 0xff, 0xb8, 0xfe, 0x5c, 0xff, 0xbc, 0xfe, 0x52, 0xff, 0xc0, 0xfe, 0x4a, 0xff,
            0xc8, 0xfe, 0x41, 0xff, 0xcd, 0xfe, 0x3a, 0xff, 0xcd, 0xfe
    };
    std::cout << "size of vita buff:" << sizeof(vita_buff) << std::endl;
    while(true) {
        if(stream_run) {
            ssize_t n = ::sendto(sock_fd, vita_buff, sizeof(vita_buff), 0,
                                 reinterpret_cast<sockaddr *>(&destination),
                                 sizeof(destination));
            if (n < 0) {
                perror("Send VITA");
            } else if (n == 0) {
                std::cout << "Nothing sent, why?" << std::endl;
            }
        } else {
            usleep(500000);
        }
    }
}

void stream_thread_func()
{
    system(TCP_REPLY_COMMAND);
}

void process_stream(const chameleon_fw_comms_t &request)
{
    std::cout << "Process set stream command. chans:0x" << std::hex << request.stream.chans
        << " enable:" << std::dec << request.stream.enable << std::endl;
    if(request.stream.enable) {
        std::cout << "Enable Stream" << std::endl;
        stream_run = true;
        new std::thread(&stream_thread_func);
    } else {
        std::cout << "Disable Stream" << std::endl;
        stream_run = false;
        system("kill -9 `pidof tcpreplay`");
    }
}

[[noreturn]]
void process_thread_func() {
    while (true) {
        std::unique_lock<std::mutex> lock(mtx);
        cv.wait(lock, [] { return !buffer.empty(); });
        chameleon_fw_comms_t request = buffer.front();
        buffer.pop();
        lock.unlock();
        std::cout << "Process Thread"
           << " flags:0x" << std::hex << request.flags
           << " sequence:0x" << std::hex << request.sequence
           << " addr:0x" << std::hex << request.addr
           << " data:0x";
           for (int i = 0; i < sizeof(request.data); i++) {
               std::cout << std::hex << (int)request.data.v[i] << ":";
           }
           std::cout << std::dec << std::endl;
        switch (request.addr) {
        case CHAMELEON_FW_COMMS_CMD_TUNE_FREQ : process_freq(request);   break;
        case CHAMELEON_FW_COMMS_CMD_STREAM_CMD: process_stream(request); break;
        default:
            std::cout << "Unsupported command:" << request.addr << std::endl;
        }
    }
}

void receive_thread_func(int sock_fd)
{
    std::cout << __FUNCTION__;
    std::cout << "the socket is = " << sock_fd << std::endl;

    socklen_t len;
    auto request = chameleon_fw_comms_t();
    sockaddr_in server_addr{};

    ssize_t n = 0;
    while (n >= 0) {
        n = recvfrom(sock_fd, &request, sizeof(request),
                               0, (struct sockaddr*)&server_addr,
                               &len);
        if (n > 0) {
            std::cout << "Received"
                << " flags:0x" << std::hex << request.flags
                << " bytes:" << std::dec << n
                << " sequence:0x" << std::hex << request.sequence
                << " addr:0x" << std::hex << request.addr;
                for (int i = 0; i < sizeof(request.data); i++) {
                    std::cout << std::hex << (int)request.data.v[i] << ":";
                }
                std::cout << std::dec << std::endl;
            std::unique_lock<std::mutex> lock(mtx);
            buffer.push(request);
            cv.notify_one();
            lock.unlock();
        } else if (n < 0 && errno == ETIMEDOUT ) {
            n = 0;
            std::cout << "Timeout waiting for command" << std::endl;
        }
    }
}

int open_socket(int port)
{
    int err = 0;
    int sock_fd = -1;

    // Creating socket file descriptor
    err = socket(AF_INET, SOCK_DGRAM, 0);
    if (err < 0) {
        perror("socket creation failed");
    }
    else {
        sock_fd = err;

        sockaddr_in servaddr{};
        servaddr.sin_family = AF_INET;
        servaddr.sin_port = htons(port);
        servaddr.sin_addr.s_addr = INADDR_ANY;
        err = bind(sock_fd, (const struct sockaddr*)&servaddr, sizeof(servaddr));
        if (err < 0) {
            perror("bind failed");
        }
    }
    if (!err) {
        timeval tv;
        tv.tv_sec = RECV_TIMEOUT_SECS;
        tv.tv_usec = 0;
        err = setsockopt(sock_fd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
        if (err < 0) {
            perror("Socket timeout set error");
        }
    }
    if (err && sock_fd > -1) {
        close(sock_fd);
    }
    return err ? err : sock_fd;
}

int IHD_SAFE_MAIN(int argc, char *argv[])
{
    int err = 0;
    int com_sock_fd = -1;
    int vita_sock_fd = -1;

    com_sock_fd = open_socket(CHAMELEON_FW_COMMS_UDP_PORT);
    if (com_sock_fd < 0) {
        err = -1;
        perror("COM Port open");
    }
    if (!err) {
        vita_sock_fd = socket(AF_INET, SOCK_DGRAM, 0);
        if (vita_sock_fd < 0) {
            err = -1;
            perror("VITA socket open");
        }
    }
    if (!err) {
        std::thread receive_thread(&receive_thread_func, com_sock_fd);
        std::thread process_thread(&process_thread_func);
        std::thread vita_thread(&vita_thread_func, vita_sock_fd);

        receive_thread.join();
        process_thread.join();
        vita_thread.join();
    }
    if (com_sock_fd > -1) {
        close(com_sock_fd);
    }
    if (vita_sock_fd > -1) {
        close(com_sock_fd);
    }
    return err;
}
